# <editor-fold desc="XML DATA">

XML_FILE_TEMPLATE = '''<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:cim="http://iec.ch/TC57/2010/CIM-schema-cim15#"
	xmlns:ftn="http://www.ftnydro.com/CIM15/2010/extension#">
<!-- generated by: 'CIMET' application -->{{data}}

</rdf:RDF>'''
DATA_POINT_TEMPLATE = '''
\t<cim:{{class_name}} rdf:ID="{{class_id}}">
{{class_data}}
\t</cim:{{class_name}}>'''

# </editor-fold>

# <editor-fold desc="ENUMS">

ENUM_CODE_TEMPLATE = '''\tpublic enum {{enum_name}} : short
\t{
{{options}}
\t}'''

ENUM_OPTION_TEMPLATE = '''\t\t{{option_name}} = {{index}},'''

# </editor-fold>

# <editor-fold desc="CONVERTER METHODS">

CONVERTER_METHODS_CODE_TEMPLATE = '''\t\t#region Populate ResourceDescription
{{populate_methods}}
\t\t#endregion Populate ResourceDescription

\t\t#region Enums convert
{{enums_methods}}
\t\t#endregion Enums convert'''

POPULATE_CLASS_PROPERTIES_METHOD_TEMPLATE = '''\t\tpublic static void Populate{{class_name}}Properties({{namespace}}.{{class_name}} cim{{class_name}}, ResourceDescription rd{{reference_parameters}})
\t\t{
\t\t\tif ((cim{{class_name}} != null) && (rd != null))
\t\t\t{{{inheritance_class_method}}{{properties}}
\t\t\t}
\t\t}'''

REFERENCE_PARAMETERS_TEMPLATE = ''', ImportHelper importHelper, TransformAndLoadReport report'''

INHERITANCE_METHOD_CALL_TEMPLATE = '''\n\t\t\t\tPowerTransformerConverter.Populate{{parent_class}}Properties(cim{{class_name}}, rd{{reference_parameters}});'''

INHERITANCE_REFERENCE_PARAMETERS = ''', importHelper, report'''

PROPERTY_CODE_TEMPLATE = '''\n\t\t\t\tif(cim{{class_name}}.{{property_name}}HasValue)
\t\t\t\t{
\t\t\t\t\trd.AddProperty(new Property(ModelCode.{{property_model_code}}, cim{{class_name}}.{{property_name}}));
\t\t\t\t}'''

ENUM_PROPERTY_CODE_TEMPLATE = '''\n\t\t\t\tif(cim{{class_name}}.{{property_name}}HasValue)
\t\t\t\t{
\t\t\t\t\trd.AddProperty(new Property(ModelCode.{{property_model_code}}, (short)GetDMS{{enum_name}}(cim{{class_name}}.{{property_name}})));
\t\t\t\t}'''

REFERENCE_PROPERTY_CODE_TEMPLATE = '''\n\t\t\t\tif (cim{{class_name}}.{{property_name}}HasValue)
\t\t\t\t{
\t\t\t\t\tlong gid = importHelper.GetMappedGID(cim{{class_name}}.{{property_name}}.ID);
\t\t\t\t\tif (gid < 0)
\t\t\t\t\t{
\t\t\t\t\t\treport.Report.Append("WARNING: Convert ").Append(cim{{class_name}}.GetType().ToString()).Append(" rdfID = ").Append(cim{{class_name}}.ID);
\t\t\t\t\t\treport.Report.Append(" - Failed to set reference to {{property_name}}: rdfID ").Append(cim{{class_name}}.{{property_name}}.ID).AppendLine(" is not mapped to GID!");
\t\t\t\t\t}
\t\t\t\t\trd.AddProperty(new Property(ModelCode.{{property_model_code}}, gid));
\t\t\t\t}'''

GET_DMS_ENUM_METHOD_TEMPLATE = '''\t\tpublic static {{enum_name}} GetDMS{{enum_name}}({{namespace}}.{{enum_name}} {{var_enum_name}})
\t\t{
\t\t\tswitch ({{var_enum_name}})
\t\t\t{
{{cases}}

\t\t\t\tdefault:
\t\t\t\t\tthrow new ArgumentOutOfRangeException(nameof({{var_enum_name}}), {{var_enum_name}}, "Unhandled {{var_enum_name}}.");
\t\t\t}
\t\t}'''

GET_DMS_ENUM_CASE_TEMPLATE = '''\t\t\t\tcase {{namespace}}.{{enum_name}}.{{enum_value}}:
\t\t\t\t\treturn {{enum_name}}.{{enum_value}};'''

# </editor-fold>

# <editor-fold desc="IMPORTER METHODS">

IMPORT_METHODS_CODE_TEMPLATE = '''{{import_methods_calls_function}}

\t\t#region Import
{{import_methods}}
\t\t#endregion Import'''

IMPORT_METHOD_CALLS_FUNCTION_TEMPLATE = '''\t\t/// <summary>
\t\t/// Method performs conversion of network elements from CIM based concrete model into DMS model.
\t\t/// </summary>
\t\tprivate void ConvertModelAndPopulateDelta()
\t\t{
\t\t\tLogManager.Log("Loading elements and creating delta...", LogLevel.Info);

\t\t\t//// import all concrete model types (DMSType enum)
{{import_calls}}

\t\t\tLogManager.Log("Loading elements and creating delta completed.", LogLevel.Info);
\t\t}'''

IMPORT_METHOD_CALL_TEMPLATE = '''\t\t\tImport{{class_name}}();'''

IMPORT_CLASS_METHOD_PAIR = '''{{import_method}}

{{create_description_method}}'''

IMPORT_CLASS_METHOD_TEMPLATE = '''\t\tprivate void Import{{class_name}}()
\t\t{
\t\t\tSortedDictionary<string, object> cim{{class_name}}es = concreteModel.GetAllObjectsOfType("{{namespace}}.{{class_name}}");
\t\t\tif (cim{{class_name}}es != null)
\t\t\t{
\t\t\t\tforeach (KeyValuePair<string, object> cim{{class_name}}Pair in cim{{class_name}}es)
\t\t\t\t{
\t\t\t\t\t{{namespace}}.{{class_name}} cim{{class_name}} = cim{{class_name}}Pair.Value as {{namespace}}.{{class_name}};

\t\t\t\t\tResourceDescription rd = Create{{class_name}}Description(cim{{class_name}});
\t\t\t\t\tif (rd != null)
\t\t\t\t\t{
\t\t\t\t\t	delta.AddDeltaOperation(DeltaOpType.Insert, rd, true);
\t\t\t\t\t	report.Report.Append("{{class_name}} ID = ").Append(cim{{class_name}}.ID).Append(" SUCCESSFULLY converted to GID = ").AppendLine(rd.Id.ToString());
\t\t\t\t\t}
\t\t\t\t\telse
\t\t\t\t\t{
\t\t\t\t\t	report.Report.Append("{{class_name}} ID = ").Append(cim{{class_name}}.ID).AppendLine(" FAILED to be converted");
\t\t\t\t\t}
\t\t\t\t}
\t\t\t\treport.Report.AppendLine();
\t\t\t}
\t\t}'''

CREATE_CLASS_DESCRIPTION_METHOD_TEMPLATE = '''\t\tprivate ResourceDescription Create{{class_name}}Description({{namespace}}.{{class_name}} cim{{class_name}})
\t\t{
\t\t\tResourceDescription rd = null;
\t\t\tif (cim{{class_name}} != null)
\t\t\t{
\t\t\t\tlong gid = ModelCodeHelper.CreateGlobalId(0, (short)DMSType.{{model_code_name}}, importHelper.CheckOutIndexForDMSType(DMSType.{{model_code_name}}));
\t\t\t\trd = new ResourceDescription(gid);
\t\t\t\timportHelper.DefineIDMapping(cim{{class_name}}.ID, gid);

\t\t\t\t////populate ResourceDescription
\t\t\t\tPowerTransformerConverter.Populate{{class_name}}Properties(cim{{class_name}}, rd{{reference_parameters}});
\t\t\t}
\t\t\treturn rd;
\t\t}'''

# </editor-fold>

# <editor-fold desc="SERVER CLASSES">

IDENTIFIED_OBJECT_CLASS_CODE = '''using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Reflection;
using FTN.Common;

namespace FTN.Services.NetworkModelService.DataModel.Classes
{
	public enum TypeOfReference : short
	{
		Reference = 1,
		Target = 2,
		Both = 3,
	}

	public class IdentifiedObject
	{
		/// <summary>
		/// Model Resources Description
		/// </summary>
		private static ModelResourcesDesc resourcesDescs = new ModelResourcesDesc();

		/// <summary>
		/// Global id of the identified object (SystemId - 4 nibls, DMSType - 4 nibls, FragmentId - 8 nibls)
		/// </summary>
		private long globalId;

		/// <summary>
		/// Name of identified object
		/// </summary>		
		private string name = string.Empty;

		/// <summary>
		/// Mrid (source) id of identified object
		/// </summary>		
		private string mrid = string.Empty;

		/// <summary>
		/// Description of identified object
		/// </summary>		
		private string aliasName = string.Empty;

		/// <summary>
		/// Initializes a new instance of the IdentifiedObject class.
		/// </summary>		
		/// <param name="globalId">Global id of the entity.</param>
		public IdentifiedObject(long globalId)
		{
			this.globalId = globalId;			
		}		

		/// <summary>
		/// Gets or sets global id of the entity (identified object).
		/// </summary>			
		public long GlobalId
		{
			get
			{
				return globalId;
			}

			set
			{
				globalId = value;
			}
		}

		/// <summary>
		/// Gets or sets name of the entity (identified object).
		/// </summary>			
		public string Name
		{
			get
			{				
				return name;
			}

			set
			{			
				name = value;
			}
		}

		/// <summary>
		/// Gets or sets mrid of the entity (identified object).
		/// </summary>			
		public string Mrid
		{
			get { return mrid; }
			set { mrid = value; }
		}

		/// <summary>
		/// Gets or sets description of the entity (identified object).
		/// </summary>			
		public string AliasName
		{
			get { return aliasName; }
			set { aliasName = value; }
		}		

		public static bool operator ==(IdentifiedObject x, IdentifiedObject y)
		{
			if(Object.ReferenceEquals(x, null) && Object.ReferenceEquals(y, null))
			{
				return true;
			}
			else if((Object.ReferenceEquals(x, null) && !Object.ReferenceEquals(y, null)) || (!Object.ReferenceEquals(x, null) && Object.ReferenceEquals(y, null)))
			{
				return false;
			}
			else
			{
				return x.Equals(y);
			}
		}

		public static bool operator !=(IdentifiedObject x, IdentifiedObject y)
		{
			return !(x == y);
		}

		public override bool Equals(object x)
		{
			if(Object.ReferenceEquals(x, null))
			{
				return false;
			}
			else
			{
				IdentifiedObject io = (IdentifiedObject)x;
				return ((io.GlobalId == this.GlobalId) && (io.name == this.name) && (io.mrid == this.mrid) &&
						(io.aliasName == this.aliasName));
			}
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#region IAccess implementation		

		public virtual bool HasProperty(ModelCode property)
		{
			switch(property)
			{
				case ModelCode.IDOBJ_GID:				
				case ModelCode.IDOBJ_NAME:
				case ModelCode.IDOBJ_ALIASNAME:
				case ModelCode.IDOBJ_MRID:
					return true;

				default:				
					return false;
			}
		}

		public virtual void GetProperty(Property property)
		{
			switch(property.Id)
			{
				case ModelCode.IDOBJ_GID:
					property.SetValue(globalId);
					break;

				case ModelCode.IDOBJ_NAME:
					property.SetValue(name);
					break;

				case ModelCode.IDOBJ_MRID:
					property.SetValue(mrid);
					break;

                case ModelCode.IDOBJ_ALIASNAME:
                    property.SetValue(aliasName);
                    break;

				default:
					string message = string.Format("Unknown property id = {0} for entity (GID = 0x{1:x16}).", property.Id.ToString(), this.GlobalId);
					CommonTrace.WriteTrace(CommonTrace.TraceError, message);
					throw new Exception(message);										
			}
		}

		public virtual void SetProperty(Property property)
		{
			switch(property.Id)
			{
				case ModelCode.IDOBJ_NAME:
					name = property.AsString();					
					break;

				case ModelCode.IDOBJ_ALIASNAME:
					aliasName = property.AsString();					
					break;

				case ModelCode.IDOBJ_MRID:					
					mrid = property.AsString();
					break;				

				default:					
					string message = string.Format("Unknown property id = {0} for entity (GID = 0x{1:x16}).", property.Id.ToString(), this.GlobalId);
					CommonTrace.WriteTrace(CommonTrace.TraceError, message);
					throw new Exception(message);					
			}
		}

		#endregion IAccess implementation

		#region IReference implementation	

		public virtual bool IsReferenced
		{
			get
			{			
				return false;
			}
		}

		public virtual void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
		{
			return;
		}

		public virtual void AddReference(ModelCode referenceId, long globalId)
		{
			string message = string.Format("Can not add reference {0} to entity (GID = 0x{1:x16}).", referenceId, this.GlobalId);
			CommonTrace.WriteTrace(CommonTrace.TraceError, message);
			throw new Exception(message);						
		}

		public virtual void RemoveReference(ModelCode referenceId, long globalId)
		{
			string message = string.Format("Can not remove reference {0} from entity (GID = 0x{1:x16}).", referenceId, this.GlobalId);
			CommonTrace.WriteTrace(CommonTrace.TraceError, message);
			throw new ModelException(message);		
		}

		#endregion IReference implementation

		#region utility methods

		public void GetReferences(Dictionary<ModelCode, List<long>> references)
		{
			GetReferences(references, TypeOfReference.Target | TypeOfReference.Reference);
		}

		public ResourceDescription GetAsResourceDescription(bool onlySettableAttributes)
		{
			ResourceDescription rd = new ResourceDescription(globalId);
			List<ModelCode> props = new List<ModelCode>();

			if (onlySettableAttributes == true)
			{
				props = resourcesDescs.GetAllSettablePropertyIdsForEntityId(globalId);
			}
			else
			{
				props = resourcesDescs.GetAllPropertyIdsForEntityId(globalId);
			}

			return rd;
		}

		public ResourceDescription GetAsResourceDescription(List<ModelCode> propIds)
		{
			ResourceDescription rd = new ResourceDescription(globalId);

			for (int i = 0; i < propIds.Count; i++)
			{
				rd.AddProperty(GetProperty(propIds[i]));
			}

			return rd;
		}

		public virtual Property GetProperty(ModelCode propId)
		{
			Property property = new Property(propId);
			GetProperty(property);
			return property;
		}

		public void GetDifferentProperties(IdentifiedObject compared, out List<Property> valuesInOriginal, out List<Property> valuesInCompared)
		{
			valuesInCompared = new List<Property>();
			valuesInOriginal = new List<Property>();

			ResourceDescription rd = this.GetAsResourceDescription(false);

			if (compared != null)
			{
				ResourceDescription rdCompared = compared.GetAsResourceDescription(false);

				for (int i = 0; i < rd.Properties.Count; i++)
				{
					if (rd.Properties[i] != rdCompared.Properties[i])
					{
						valuesInOriginal.Add(rd.Properties[i]);
						valuesInCompared.Add(rdCompared.Properties[i]);
					}
				}
			}
			else
			{
				for (int i = 0; i < rd.Properties.Count; i++)
				{
					valuesInOriginal.Add(rd.Properties[i]);
				}
			}
		}	

		#endregion utility methods
	}
}
'''

SERVER_CLASS_TEMPLATE = '''using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using FTN.Common;

namespace FTN.Services.NetworkModelService.DataModel.Classes
{
\tpublic class {{class_name}} : {{parent_class_name}}
\t{{{properties}}
\t\tpublic {{class_name}}(long globalId) : base(globalId) 
\t\t{
\t\t}
{{iaccess_implementation}}
{{ireference_implementation}}
\t}
}'''

SERVER_ENUM_TEMPLATE = '''using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FTN.Services.NetworkModelService.DataModel.Classes
{
\tpublic enum {{enum_name}}
\t{
{{enum_values}}
\t}
}'''

SERVER_CLASS_PROPERTY_TEMPLATE = '''\t\tpublic {{prop_type}} {{prop_name}} { get; set; }'''

SERVER_CLASS_REFLIST_PROPERTY_TEMPLATE = '''\t\tpublic List<long> {{prop_name}} { get; set; } = new List<long>();'''

# <editor-fold desc="IACCESS">

IACCESS_IMPLEMENTATION_CODE_TEMPLATE = '''
\t\t#region IAccess implementation

{{has_property_code}}

{{get_property_code}}

{{set_property_code}}

\t\t#endregion IAccess implementation'''

HAS_PROPERTY_CODE_TEMPLATE = '''\t\tpublic override bool HasProperty(ModelCode property)
\t\t{
\t\t\tswitch(property)
\t\t\t{{{cases_code}}
\t\t\t\tdefault:
\t\t\t\t\treturn base.HasProperty(property);
\t\t\t}
\t\t}'''

HAS_PROPERTY_CASES_CODE_TEMPLATE = '''
{{cases_code}}
\t\t\t\t\treturn true;
'''

HAS_PROPERTY_CASE_CODE_TEMPLATE = '''\t\t\t\tcase ModelCode.{{prop_model_code}}:'''

GET_PROPERTY_CODE_TEMPLATE = '''\t\tpublic override void GetProperty(Property property)
\t\t{
\t\t\tswitch(property.Id)
\t\t\t{{{cases_code}}
\t\t\t\tdefault:
\t\t\t\t\tbase.GetProperty(property);
\t\t\t\t\tbreak;
\t\t\t}
\t\t}'''

GET_PROPERTY_CASE_CODE_TEMPLATE = '''\t\t\t\tcase ModelCode.{{prop_model_code}}:
\t\t\t\t\tproperty.SetValue({{prop_name}});
\t\t\t\t\tbreak;'''

SET_PROPERTY_CODE_TEMPLATE = '''\t\tpublic override void SetProperty(Property property)
\t\t{
\t\t\tswitch(property.Id)
\t\t\t{{{cases_code}}
\t\t\t\tdefault:
\t\t\t\t\tbase.SetProperty(property);
\t\t\t\t\tbreak;
\t\t\t}
\t\t}'''

SET_PROPERTY_CASE_CODE_TEMPLATE = '''\t\t\t\tcase ModelCode.{{prop_model_code}}:
\t\t\t\t\t{{prop_name}} = property.As{{prop_type}}();
\t\t\t\t\tbreak;'''

SET_PROPERTY_ENUM_CASE_CODE_TEMPLATE = '''\t\t\t\tcase ModelCode.{{prop_model_code}}:
\t\t\t\t\t{{prop_name}} = ({{enum_name}})property.AsEnum();
\t\t\t\t\tbreak;'''

# </editor-fold>

# <editor-fold desc="IREFERENCE">

IREFERENCE_IMPLEMENTATION_CODE_TEMPLATE = '''
\t\t#region IReference implementation
{{is_referenced_code}}{{get_references_code}}{{add_reference_code}}{{remove_reference_code}}
\t\t#endregion IAccess implementation'''

IS_REFERENCED_CODE_TEMPLATE = '''
\t\tpublic override bool IsReferenced
\t\t{
\t\t\tget
\t\t\t{
\t\t\t\treturn ({{is_referenced_inner_code}}) || base.IsReferenced;
\t\t\t}
\t\t}
'''

IS_REFERENCED_INNER_CODE_TEMPLATE = '''{{prop_name}}.Count > 0'''

GET_REFERENCES_CODE_TEMPLATE = '''
\t\tpublic override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
\t\t{
{{reference_codes}}

\t\t	base.GetReferences(references, refType);
\t\t}
'''

GET_REFERENCES_REFERENCE_CODE_TEMPLATE = '''
\t\t\tif ({{prop_name}} != 0 && (refType == TypeOfReference.Reference || refType == TypeOfReference.Both))
\t\t\t{
\t\t\t\treferences[ModelCode.{{prop_model_code_name}}] = new List<long>();
\t\t\t\treferences[ModelCode.{{prop_model_code_name}}].Add({{prop_name}});
\t\t\t}'''

ADD_REFERENCE_CODE_TEMPLATE = '''
\t\tpublic override void AddReference(ModelCode referenceId, long globalId)
\t\t{
\t\t\tswitch (referenceId)
\t\t\t{
{{cases_code}}

\t\t\t\tdefault:
\t\t\t\t\tbase.AddReference(referenceId, globalId);
\t\t\t\t\tbreak;
\t\t\t}
\t\t}
'''

ADD_REFERENCE_CASE_CODE_TEMPLATE = '''\t\t\t\tcase ModelCode.{{prop_model_code_name}}:
\t\t\t\t\t{{prop_name}}.Add(globalId);
\t\t\t\t\tbreak;'''

REMOVE_REFERENCE_CODE_TEMPLATE = '''
\t\tpublic override void RemoveReference(ModelCode referenceId, long globalId)
\t\t{
\t\t\tswitch (referenceId)
\t\t\t{
{{cases_code}}

\t\t\t	default:
\t\t\t		base.RemoveReference(referenceId, globalId);
\t\t\t		break;
\t\t\t}
\t\t}
'''

REMOVE_REFERENCE_CASE_CODE_TEMPLATE = '''\t\t\t\tcase ModelCode.{{prop_model_code_name}}:

\t\t\t\t\tif ({{prop_name}}.Contains(globalId))
\t\t\t\t\t{
\t\t\t\t\t\t{{prop_name}}.Remove(globalId);
\t\t\t\t\t}
\t\t\t\t\telse
\t\t\t\t\t{
\t\t\t\t\t\tCommonTrace.WriteTrace(CommonTrace.TraceWarning, "Entity (GID = 0x{0:x16}) doesn't contain reference 0x{1:x16}.", this.GlobalId, globalId);
\t\t\t\t\t}

\t\t\t\t\tbreak;'''

# </editor-fold>

# </editor-fold>
